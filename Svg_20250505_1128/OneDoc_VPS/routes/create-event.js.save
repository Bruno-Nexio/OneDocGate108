// create-event.js

/**
 * Encapsulates the routes
 * @param {FastifyInstance} fastify  Encapsulated Fastify Instance
 * @param {Object} options plugin options, refer to https://fastify.dev/docs/latest/Reference/Plugins/#plugin-options
 */

async function routes(fastify, options) {

const eventSchema = {
  body: {
    type: "object",
    properties: {
      startDateTime: {
        type: "string",
        pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?(?:Z)?$"
      },
      endDateTime: {
        type: "string",
        pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d{3})?(?:Z)?$"
      },
      patient: {
        type: "object",
        properties: {
          id: { type: "string" },
          firstName: { type: "string" },
          lastName: { type: "string" },
          gender: { type: "string", enum: ["male", "female", "other"] },
          birthDate: { type: "string", format: "date" },
          email: { type: "string", format: "email" },
          mobilePhoneNumber: { type: "string" },
          insuranceCardNumber: { type: "string" },
          address: {
            type: "object",
            properties: {
              street: { type: "string" },
              streetNumber: { type: "string" },
              zipCode: { type: "string" },
              city: { type: "string" },
              state: { type: "string" },
              country: { type: "string" }
            },
            required: ["street", "streetNumber", "zipCode", "city", "state", "country"]
          }
        },
        required: ["id", "firstName", "lastName", "gender", "birthDate", "email", "mobilePhoneNumber", "insuranceCardNumber", "address"]
      },
      appointmentType: {
        type: "object",
        properties: {
          id: { type: "integer" },
          name: { type: "string" }
        },
        required: ["id", "name"]
      },
      comment: { type: "string" },
      summary: { type: "string" }
    },
    required: ["startDateTime", "endDateTime", "patient", "appointmentType"]
  },
  params: {
    type: "object",
    properties: {
      calendarId: { type: "integer" }
    },
    required: ["calendarId"]
  }
};


  fastify.post('/calendars/:calendarId/events', {
    schema: eventSchema
  },
  async (request, reply) => {

    const { calendarId } = request.params;
    const { startDateTime, endDateTime, patient, appointmentType, comment, summary } = request.body;
    const db = fastify.mongo.db;

    const { getNextSequence, peekNextSequence } = require('../utils/sequence');

    // üîÅ Pour ins√©rer :

    const newEvent = {
      calendarId: parseInt(calendarId),
      startDateTime: new Date(startDateTime), // ‚úÖ Bonne syntaxe
      endDateTime: new Date(endDateTime),     // ‚úÖ Bonne syntaxe
      patient,
      appointmentType,
      comment: comment || "",
      summary: summary || "",
      createdAt: new Date()
    };

  // Ici, on ins√®re en base MongoDB (exemple)

  try {
    const result = await db.collection('events').insertOne(newEvent);

     return reply.code(201).send({
      id: result.insertedId.toString(),
      startDateTime: startDateTime, // garder tel que re√ßu
      endDateTime: endDateTime,
      description: comment || ""
    });
    } catch (err) {
     request.log.error(err);
     return reply.code(500).send({
       code: 2035,
       message: "Erreur lors de la cr√©ation de l'√©v√©nement"
     });
   }
  });
}


// CommonJs
module.exports = routes
